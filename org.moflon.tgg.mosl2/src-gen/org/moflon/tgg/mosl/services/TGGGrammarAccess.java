/*
 * generated by Xtext
 */
package org.moflon.tgg.mosl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TGGGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TripleGraphGrammarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TripleGraphGrammar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSchemaAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSchemaSchemaParserRuleCall_0_0 = (RuleCall)cSchemaAssignment_0.eContents().get(0);
		private final Assignment cRulesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRulesRuleParserRuleCall_1_0 = (RuleCall)cRulesAssignment_1.eContents().get(0);
		
		////TripleGraphGrammar:
		// //  (files += SpecFile)*
		// //;
		// TripleGraphGrammar:
		//	schema=Schema? rules+=Rule?;
		@Override public ParserRule getRule() { return rule; }

		//schema=Schema? rules+=Rule?
		public Group getGroup() { return cGroup; }

		//schema=Schema?
		public Assignment getSchemaAssignment_0() { return cSchemaAssignment_0; }

		//Schema
		public RuleCall getSchemaSchemaParserRuleCall_0_0() { return cSchemaSchemaParserRuleCall_0_0; }

		//rules+=Rule?
		public Assignment getRulesAssignment_1() { return cRulesAssignment_1; }

		//Rule
		public RuleCall getRulesRuleParserRuleCall_1_0() { return cRulesRuleParserRuleCall_1_0; }
	}

	public class SpecFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpecFile");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRuleParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSchemaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SpecFile:
		//	Rule | Schema;
		@Override public ParserRule getRule() { return rule; }

		//Rule | Schema
		public Alternatives getAlternatives() { return cAlternatives; }

		//Rule
		public RuleCall getRuleParserRuleCall_0() { return cRuleParserRuleCall_0; }

		//Schema
		public RuleCall getSchemaParserRuleCall_1() { return cSchemaParserRuleCall_1; }
	}

	public class SchemaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Schema");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cSchemaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSourceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cSourceTypesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cSourceTypesEPackageCrossReference_3_2_0 = (CrossReference)cSourceTypesAssignment_3_2.eContents().get(0);
		private final RuleCall cSourceTypesEPackageQualifiedNameParserRuleCall_3_2_0_1 = (RuleCall)cSourceTypesEPackageCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTargetKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cTargetTypesAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cTargetTypesEPackageCrossReference_4_2_0 = (CrossReference)cTargetTypesAssignment_4_2.eContents().get(0);
		private final RuleCall cTargetTypesEPackageQualifiedNameParserRuleCall_4_2_0_1 = (RuleCall)cTargetTypesEPackageCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCorrespondenceKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cCorrespondenceTypesAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cCorrespondenceTypesCorrTypeParserRuleCall_5_2_0 = (RuleCall)cCorrespondenceTypesAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cAttributeConditionsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cAttributeCondDefsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cAttributeCondDefsAttrCondDefParserRuleCall_6_2_0 = (RuleCall)cAttributeCondDefsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//Schema:
		//	imports+=Import* "schema" name=ID ("source" "{" sourceTypes+=[ecore::EPackage|QualifiedName]* "}")? ("target" "{"
		//	targetTypes+=[ecore::EPackage|QualifiedName]* "}")? ("correspondence" "{" correspondenceTypes+=CorrType*
		//	//		correspondenceTypes += [CorrTypeDef | TypeExtension]*
		// //		correspondenceTypes += CorrTypeDef*
		// "}")?
		//	("attribute conditions" "{" attributeCondDefs+=AttrCondDef* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* "schema" name=ID ("source" "{" sourceTypes+=[ecore::EPackage|QualifiedName]* "}")? ("target" "{"
		//targetTypes+=[ecore::EPackage|QualifiedName]* "}")? ("correspondence" "{" correspondenceTypes+=CorrType*
		////		correspondenceTypes += [CorrTypeDef | TypeExtension]*
		// //		correspondenceTypes += CorrTypeDef*
		// "}")?
		//("attribute conditions" "{" attributeCondDefs+=AttrCondDef* "}")?
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"schema"
		public Keyword getSchemaKeyword_1() { return cSchemaKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("source" "{" sourceTypes+=[ecore::EPackage|QualifiedName]* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"source"
		public Keyword getSourceKeyword_3_0() { return cSourceKeyword_3_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }

		//sourceTypes+=[ecore::EPackage|QualifiedName]*
		public Assignment getSourceTypesAssignment_3_2() { return cSourceTypesAssignment_3_2; }

		//[ecore::EPackage|QualifiedName]
		public CrossReference getSourceTypesEPackageCrossReference_3_2_0() { return cSourceTypesEPackageCrossReference_3_2_0; }

		//QualifiedName
		public RuleCall getSourceTypesEPackageQualifiedNameParserRuleCall_3_2_0_1() { return cSourceTypesEPackageQualifiedNameParserRuleCall_3_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }

		//("target" "{" targetTypes+=[ecore::EPackage|QualifiedName]* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"target"
		public Keyword getTargetKeyword_4_0() { return cTargetKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//targetTypes+=[ecore::EPackage|QualifiedName]*
		public Assignment getTargetTypesAssignment_4_2() { return cTargetTypesAssignment_4_2; }

		//[ecore::EPackage|QualifiedName]
		public CrossReference getTargetTypesEPackageCrossReference_4_2_0() { return cTargetTypesEPackageCrossReference_4_2_0; }

		//QualifiedName
		public RuleCall getTargetTypesEPackageQualifiedNameParserRuleCall_4_2_0_1() { return cTargetTypesEPackageQualifiedNameParserRuleCall_4_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }

		//("correspondence" "{" correspondenceTypes+=CorrType* //		correspondenceTypes += [CorrTypeDef | TypeExtension]*
		//
		////		correspondenceTypes += CorrTypeDef*
		// "}")?
		public Group getGroup_5() { return cGroup_5; }

		//"correspondence"
		public Keyword getCorrespondenceKeyword_5_0() { return cCorrespondenceKeyword_5_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }

		//correspondenceTypes+=CorrType*
		public Assignment getCorrespondenceTypesAssignment_5_2() { return cCorrespondenceTypesAssignment_5_2; }

		//CorrType
		public RuleCall getCorrespondenceTypesCorrTypeParserRuleCall_5_2_0() { return cCorrespondenceTypesCorrTypeParserRuleCall_5_2_0; }

		////		correspondenceTypes += [CorrTypeDef | TypeExtension]*
		// //		correspondenceTypes += CorrTypeDef*
		// "}"
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }

		//("attribute conditions" "{" attributeCondDefs+=AttrCondDef* "}")?
		public Group getGroup_6() { return cGroup_6; }

		//"attribute conditions"
		public Keyword getAttributeConditionsKeyword_6_0() { return cAttributeConditionsKeyword_6_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }

		//attributeCondDefs+=AttrCondDef*
		public Assignment getAttributeCondDefsAssignment_6_2() { return cAttributeCondDefsAssignment_6_2; }

		//AttrCondDef
		public RuleCall getAttributeCondDefsAttrCondDefParserRuleCall_6_2_0() { return cAttributeCondDefsAttrCondDefParserRuleCall_6_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}

	public class CorrTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CorrType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCorrTypeDefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeExtensionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CorrType:
		//	CorrTypeDef | TypeExtension;
		@Override public ParserRule getRule() { return rule; }

		//CorrTypeDef | TypeExtension
		public Alternatives getAlternatives() { return cAlternatives; }

		//CorrTypeDef
		public RuleCall getCorrTypeDefParserRuleCall_0() { return cCorrTypeDefParserRuleCall_0; }

		//TypeExtension
		public RuleCall getTypeExtensionParserRuleCall_1() { return cTypeExtensionParserRuleCall_1; }
	}

	public class TypeExtensionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TypeExtension");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cExtendsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSuperAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSuperCorrTypeCrossReference_2_0 = (CrossReference)cSuperAssignment_2.eContents().get(0);
		private final RuleCall cSuperCorrTypeIDTerminalRuleCall_2_0_1 = (RuleCall)cSuperCorrTypeCrossReference_2_0.eContents().get(1);
		
		//TypeExtension:
		//	name=ID "extends" super=[CorrType];
		@Override public ParserRule getRule() { return rule; }

		//name=ID "extends" super=[CorrType]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"extends"
		public Keyword getExtendsKeyword_1() { return cExtendsKeyword_1; }

		//super=[CorrType]
		public Assignment getSuperAssignment_2() { return cSuperAssignment_2; }

		//[CorrType]
		public CrossReference getSuperCorrTypeCrossReference_2_0() { return cSuperCorrTypeCrossReference_2_0; }

		//ID
		public RuleCall getSuperCorrTypeIDTerminalRuleCall_2_0_1() { return cSuperCorrTypeIDTerminalRuleCall_2_0_1; }
	}

	public class CorrTypeDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CorrTypeDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSrcKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceEClassCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceEClassQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cSourceEClassCrossReference_3_0.eContents().get(1);
		private final Keyword cTrgKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetEClassCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetEClassQualifiedNameParserRuleCall_5_0_1 = (RuleCall)cTargetEClassCrossReference_5_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//CorrTypeDef:
		//	name=ID "{" "-src->" source=[ecore::EClass|QualifiedName] "-trg->" target=[ecore::EClass|QualifiedName] "}";
		@Override public ParserRule getRule() { return rule; }

		//name=ID "{" "-src->" source=[ecore::EClass|QualifiedName] "-trg->" target=[ecore::EClass|QualifiedName] "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//"-src->"
		public Keyword getSrcKeyword_2() { return cSrcKeyword_2; }

		//source=[ecore::EClass|QualifiedName]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getSourceEClassCrossReference_3_0() { return cSourceEClassCrossReference_3_0; }

		//QualifiedName
		public RuleCall getSourceEClassQualifiedNameParserRuleCall_3_0_1() { return cSourceEClassQualifiedNameParserRuleCall_3_0_1; }

		//"-trg->"
		public Keyword getTrgKeyword_4() { return cTrgKeyword_4; }

		//target=[ecore::EClass|QualifiedName]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getTargetEClassCrossReference_5_0() { return cTargetEClassCrossReference_5_0; }

		//QualifiedName
		public RuleCall getTargetEClassQualifiedNameParserRuleCall_5_0_1() { return cTargetEClassQualifiedNameParserRuleCall_5_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cAbstractAbstractKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Keyword cRuleKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cExtendsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSupertypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSupertypesRuleCrossReference_4_1_0 = (CrossReference)cSupertypesAssignment_4_1.eContents().get(0);
		private final RuleCall cSupertypesRuleIDTerminalRuleCall_4_1_0_1 = (RuleCall)cSupertypesRuleCrossReference_4_1_0.eContents().get(1);
		private final Keyword cWithKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSchemaAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSchemaSchemaCrossReference_6_0 = (CrossReference)cSchemaAssignment_6.eContents().get(0);
		private final RuleCall cSchemaSchemaQualifiedNameParserRuleCall_6_0_1 = (RuleCall)cSchemaSchemaCrossReference_6_0.eContents().get(1);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cSourceKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cSourcePatternsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cSourcePatternsObjectVariablePatternParserRuleCall_7_2_0 = (RuleCall)cSourcePatternsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cTargetKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cTargetPatternsAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cTargetPatternsObjectVariablePatternParserRuleCall_8_2_0 = (RuleCall)cTargetPatternsAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCorrespondenceKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cCorrespondencePatternsAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cCorrespondencePatternsCorrVariablePatternParserRuleCall_9_2_0 = (RuleCall)cCorrespondencePatternsAssignment_9_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cAttributeConditionsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cAttrConditionsAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cAttrConditionsAttrCondParserRuleCall_10_2_0 = (RuleCall)cAttrConditionsAssignment_10_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		
		//Rule:
		//	imports+=Import* abstract?="abstract"? "rule" name=ID ("extends" supertypes+=[Rule])? " with "
		//	schema=[Schema|QualifiedName] ("source" "{" sourcePatterns+=ObjectVariablePattern* "}")? ("target" "{"
		//	targetPatterns+=ObjectVariablePattern* "}")? ("correspondence" "{" correspondencePatterns+=CorrVariablePattern* "}")?
		//	("attribute conditions" "{" attrConditions+=AttrCond* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//imports+=Import* abstract?="abstract"? "rule" name=ID ("extends" supertypes+=[Rule])? " with "
		//schema=[Schema|QualifiedName] ("source" "{" sourcePatterns+=ObjectVariablePattern* "}")? ("target" "{"
		//targetPatterns+=ObjectVariablePattern* "}")? ("correspondence" "{" correspondencePatterns+=CorrVariablePattern* "}")?
		//("attribute conditions" "{" attrConditions+=AttrCond* "}")?
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//abstract?="abstract"?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }

		//"abstract"
		public Keyword getAbstractAbstractKeyword_1_0() { return cAbstractAbstractKeyword_1_0; }

		//"rule"
		public Keyword getRuleKeyword_2() { return cRuleKeyword_2; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//("extends" supertypes+=[Rule])?
		public Group getGroup_4() { return cGroup_4; }

		//"extends"
		public Keyword getExtendsKeyword_4_0() { return cExtendsKeyword_4_0; }

		//supertypes+=[Rule]
		public Assignment getSupertypesAssignment_4_1() { return cSupertypesAssignment_4_1; }

		//[Rule]
		public CrossReference getSupertypesRuleCrossReference_4_1_0() { return cSupertypesRuleCrossReference_4_1_0; }

		//ID
		public RuleCall getSupertypesRuleIDTerminalRuleCall_4_1_0_1() { return cSupertypesRuleIDTerminalRuleCall_4_1_0_1; }

		//" with "
		public Keyword getWithKeyword_5() { return cWithKeyword_5; }

		//schema=[Schema|QualifiedName]
		public Assignment getSchemaAssignment_6() { return cSchemaAssignment_6; }

		//[Schema|QualifiedName]
		public CrossReference getSchemaSchemaCrossReference_6_0() { return cSchemaSchemaCrossReference_6_0; }

		//QualifiedName
		public RuleCall getSchemaSchemaQualifiedNameParserRuleCall_6_0_1() { return cSchemaSchemaQualifiedNameParserRuleCall_6_0_1; }

		//("source" "{" sourcePatterns+=ObjectVariablePattern* "}")?
		public Group getGroup_7() { return cGroup_7; }

		//"source"
		public Keyword getSourceKeyword_7_0() { return cSourceKeyword_7_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }

		//sourcePatterns+=ObjectVariablePattern*
		public Assignment getSourcePatternsAssignment_7_2() { return cSourcePatternsAssignment_7_2; }

		//ObjectVariablePattern
		public RuleCall getSourcePatternsObjectVariablePatternParserRuleCall_7_2_0() { return cSourcePatternsObjectVariablePatternParserRuleCall_7_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }

		//("target" "{" targetPatterns+=ObjectVariablePattern* "}")?
		public Group getGroup_8() { return cGroup_8; }

		//"target"
		public Keyword getTargetKeyword_8_0() { return cTargetKeyword_8_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }

		//targetPatterns+=ObjectVariablePattern*
		public Assignment getTargetPatternsAssignment_8_2() { return cTargetPatternsAssignment_8_2; }

		//ObjectVariablePattern
		public RuleCall getTargetPatternsObjectVariablePatternParserRuleCall_8_2_0() { return cTargetPatternsObjectVariablePatternParserRuleCall_8_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }

		//("correspondence" "{" correspondencePatterns+=CorrVariablePattern* "}")?
		public Group getGroup_9() { return cGroup_9; }

		//"correspondence"
		public Keyword getCorrespondenceKeyword_9_0() { return cCorrespondenceKeyword_9_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9_1() { return cLeftCurlyBracketKeyword_9_1; }

		//correspondencePatterns+=CorrVariablePattern*
		public Assignment getCorrespondencePatternsAssignment_9_2() { return cCorrespondencePatternsAssignment_9_2; }

		//CorrVariablePattern
		public RuleCall getCorrespondencePatternsCorrVariablePatternParserRuleCall_9_2_0() { return cCorrespondencePatternsCorrVariablePatternParserRuleCall_9_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9_3() { return cRightCurlyBracketKeyword_9_3; }

		//("attribute conditions" "{" attrConditions+=AttrCond* "}")?
		public Group getGroup_10() { return cGroup_10; }

		//"attribute conditions"
		public Keyword getAttributeConditionsKeyword_10_0() { return cAttributeConditionsKeyword_10_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_10_1() { return cLeftCurlyBracketKeyword_10_1; }

		//attrConditions+=AttrCond*
		public Assignment getAttrConditionsAssignment_10_2() { return cAttrConditionsAssignment_10_2; }

		//AttrCond
		public RuleCall getAttrConditionsAttrCondParserRuleCall_10_2_0() { return cAttrConditionsAttrCondParserRuleCall_10_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10_3() { return cRightCurlyBracketKeyword_10_3; }
	}

	public class AttrCondElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrCond");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameAttrCondDefCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameAttrCondDefIDTerminalRuleCall_0_0_1 = (RuleCall)cNameAttrCondDefCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cValuesParamValueParserRuleCall_2_0_0 = (RuleCall)cValuesAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cValuesAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cValuesParamValueParserRuleCall_2_1_1_0 = (RuleCall)cValuesAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//AttrCond:
		//	name=[AttrCondDef] "(" (values+=ParamValue ("," values+=ParamValue)*)? ")";
		@Override public ParserRule getRule() { return rule; }

		//name=[AttrCondDef] "(" (values+=ParamValue ("," values+=ParamValue)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=[AttrCondDef]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//[AttrCondDef]
		public CrossReference getNameAttrCondDefCrossReference_0_0() { return cNameAttrCondDefCrossReference_0_0; }

		//ID
		public RuleCall getNameAttrCondDefIDTerminalRuleCall_0_0_1() { return cNameAttrCondDefIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(values+=ParamValue ("," values+=ParamValue)*)?
		public Group getGroup_2() { return cGroup_2; }

		//values+=ParamValue
		public Assignment getValuesAssignment_2_0() { return cValuesAssignment_2_0; }

		//ParamValue
		public RuleCall getValuesParamValueParserRuleCall_2_0_0() { return cValuesParamValueParserRuleCall_2_0_0; }

		//("," values+=ParamValue)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//values+=ParamValue
		public Assignment getValuesAssignment_2_1_1() { return cValuesAssignment_2_1_1; }

		//ParamValue
		public RuleCall getValuesParamValueParserRuleCall_2_1_1_0() { return cValuesParamValueParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class AttrCondDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AttrCondDef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsParamParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsParamParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSyncKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAllowedSyncAdornmentsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAllowedSyncAdornmentsAdornmentParserRuleCall_6_0 = (RuleCall)cAllowedSyncAdornmentsAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAllowedAdornmentsAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAllowedAdornmentsAdornmentParserRuleCall_7_1_0 = (RuleCall)cAllowedAdornmentsAssignment_7_1.eContents().get(0);
		private final Keyword cGenKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cAllowedGenAdornmentsAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cAllowedGenAdornmentsAdornmentParserRuleCall_9_0_0 = (RuleCall)cAllowedGenAdornmentsAssignment_9_0.eContents().get(0);
		private final Group cGroup_9_1 = (Group)cGroup_9.eContents().get(1);
		private final Keyword cCommaKeyword_9_1_0 = (Keyword)cGroup_9_1.eContents().get(0);
		private final Assignment cAllowedAdornmentsAssignment_9_1_1 = (Assignment)cGroup_9_1.eContents().get(1);
		private final RuleCall cAllowedAdornmentsAdornmentParserRuleCall_9_1_1_0 = (RuleCall)cAllowedAdornmentsAssignment_9_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//AttrCondDef:
		//	name=ID "(" (params+=Param ("," params+=Param)*)? ")" "{" "sync:" allowedSyncAdornments+=Adornment (","
		//	allowedAdornments+=Adornment)* "gen:" (allowedGenAdornments+=Adornment ("," allowedAdornments+=Adornment)*)? "}";
		@Override public ParserRule getRule() { return rule; }

		//name=ID "(" (params+=Param ("," params+=Param)*)? ")" "{" "sync:" allowedSyncAdornments+=Adornment (","
		//allowedAdornments+=Adornment)* "gen:" (allowedGenAdornments+=Adornment ("," allowedAdornments+=Adornment)*)? "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=Param ("," params+=Param)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=Param
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//Param
		public RuleCall getParamsParamParserRuleCall_2_0_0() { return cParamsParamParserRuleCall_2_0_0; }

		//("," params+=Param)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=Param
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//Param
		public RuleCall getParamsParamParserRuleCall_2_1_1_0() { return cParamsParamParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"sync:"
		public Keyword getSyncKeyword_5() { return cSyncKeyword_5; }

		//allowedSyncAdornments+=Adornment
		public Assignment getAllowedSyncAdornmentsAssignment_6() { return cAllowedSyncAdornmentsAssignment_6; }

		//Adornment
		public RuleCall getAllowedSyncAdornmentsAdornmentParserRuleCall_6_0() { return cAllowedSyncAdornmentsAdornmentParserRuleCall_6_0; }

		//("," allowedAdornments+=Adornment)*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//allowedAdornments+=Adornment
		public Assignment getAllowedAdornmentsAssignment_7_1() { return cAllowedAdornmentsAssignment_7_1; }

		//Adornment
		public RuleCall getAllowedAdornmentsAdornmentParserRuleCall_7_1_0() { return cAllowedAdornmentsAdornmentParserRuleCall_7_1_0; }

		//"gen:"
		public Keyword getGenKeyword_8() { return cGenKeyword_8; }

		//(allowedGenAdornments+=Adornment ("," allowedAdornments+=Adornment)*)?
		public Group getGroup_9() { return cGroup_9; }

		//allowedGenAdornments+=Adornment
		public Assignment getAllowedGenAdornmentsAssignment_9_0() { return cAllowedGenAdornmentsAssignment_9_0; }

		//Adornment
		public RuleCall getAllowedGenAdornmentsAdornmentParserRuleCall_9_0_0() { return cAllowedGenAdornmentsAdornmentParserRuleCall_9_0_0; }

		//("," allowedAdornments+=Adornment)*
		public Group getGroup_9_1() { return cGroup_9_1; }

		//","
		public Keyword getCommaKeyword_9_1_0() { return cCommaKeyword_9_1_0; }

		//allowedAdornments+=Adornment
		public Assignment getAllowedAdornmentsAssignment_9_1_1() { return cAllowedAdornmentsAssignment_9_1_1; }

		//Adornment
		public RuleCall getAllowedAdornmentsAdornmentParserRuleCall_9_1_1_0() { return cAllowedAdornmentsAdornmentParserRuleCall_9_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class AdornmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Adornment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cFKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Keyword cBKeyword_1_1_0 = (Keyword)cAlternatives_1_1.eContents().get(0);
		private final Keyword cFKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		
		//Adornment:
		//	("B" | "F") ("|" ("B" | "F"))*;
		@Override public ParserRule getRule() { return rule; }

		//("B" | "F") ("|" ("B" | "F"))*
		public Group getGroup() { return cGroup; }

		//"B" | "F"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"B"
		public Keyword getBKeyword_0_0() { return cBKeyword_0_0; }

		//"F"
		public Keyword getFKeyword_0_1() { return cFKeyword_0_1; }

		//("|" ("B" | "F"))*
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//"B" | "F"
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"B"
		public Keyword getBKeyword_1_1_0() { return cBKeyword_1_1_0; }

		//"F"
		public Keyword getFKeyword_1_1_1() { return cFKeyword_1_1_1; }
	}

	public class ParamElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Param");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEDataTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEDataTypeQualifiedNameParserRuleCall_2_0_1 = (RuleCall)cTypeEDataTypeCrossReference_2_0.eContents().get(1);
		
		//Param:
		//	name=ID ":" type=[ecore::EDataType|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" type=[ecore::EDataType|QualifiedName]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=[ecore::EDataType|QualifiedName]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EDataType|QualifiedName]
		public CrossReference getTypeEDataTypeCrossReference_2_0() { return cTypeEDataTypeCrossReference_2_0; }

		//QualifiedName
		public RuleCall getTypeEDataTypeQualifiedNameParserRuleCall_2_0_1() { return cTypeEDataTypeQualifiedNameParserRuleCall_2_0_1; }
	}

	public class ParamValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cObjectVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cObjectVarObjectVariablePatternCrossReference_0_0 = (CrossReference)cObjectVarAssignment_0.eContents().get(0);
		private final RuleCall cObjectVarObjectVariablePatternIDTerminalRuleCall_0_0_1 = (RuleCall)cObjectVarObjectVariablePatternCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEAttributeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEAttributeIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEAttributeCrossReference_2_0.eContents().get(1);
		
		//ParamValue:
		//	objectVar=[ObjectVariablePattern] "." type=[ecore::EAttribute];
		@Override public ParserRule getRule() { return rule; }

		//objectVar=[ObjectVariablePattern] "." type=[ecore::EAttribute]
		public Group getGroup() { return cGroup; }

		//objectVar=[ObjectVariablePattern]
		public Assignment getObjectVarAssignment_0() { return cObjectVarAssignment_0; }

		//[ObjectVariablePattern]
		public CrossReference getObjectVarObjectVariablePatternCrossReference_0_0() { return cObjectVarObjectVariablePatternCrossReference_0_0; }

		//ID
		public RuleCall getObjectVarObjectVariablePatternIDTerminalRuleCall_0_0_1() { return cObjectVarObjectVariablePatternIDTerminalRuleCall_0_0_1; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//type=[ecore::EAttribute]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EAttribute]
		public CrossReference getTypeEAttributeCrossReference_2_0() { return cTypeEAttributeCrossReference_2_0; }

		//ID
		public RuleCall getTypeEAttributeIDTerminalRuleCall_2_0_1() { return cTypeEAttributeIDTerminalRuleCall_2_0_1; }
	}

	public class CorrVariablePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CorrVariablePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSpaceColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeCorrTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeCorrTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeCorrTypeCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cSrcKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cSourceObjectVariablePatternCrossReference_6_0 = (CrossReference)cSourceAssignment_6.eContents().get(0);
		private final RuleCall cSourceObjectVariablePatternIDTerminalRuleCall_6_0_1 = (RuleCall)cSourceObjectVariablePatternCrossReference_6_0.eContents().get(1);
		private final Keyword cTrgKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cTargetObjectVariablePatternCrossReference_8_0 = (CrossReference)cTargetAssignment_8.eContents().get(0);
		private final RuleCall cTargetObjectVariablePatternIDTerminalRuleCall_8_0_1 = (RuleCall)cTargetObjectVariablePatternCrossReference_8_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//CorrVariablePattern:
		//	op=Operator? name=ID " : " type=[CorrType|QualifiedName] "{" "-src->" source=[ObjectVariablePattern] "-trg->"
		//	target=[ObjectVariablePattern] "}";
		@Override public ParserRule getRule() { return rule; }

		//op=Operator? name=ID " : " type=[CorrType|QualifiedName] "{" "-src->" source=[ObjectVariablePattern] "-trg->"
		//target=[ObjectVariablePattern] "}"
		public Group getGroup() { return cGroup; }

		//op=Operator?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//Operator
		public RuleCall getOpOperatorParserRuleCall_0_0() { return cOpOperatorParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//" : "
		public Keyword getSpaceColonSpaceKeyword_2() { return cSpaceColonSpaceKeyword_2; }

		//type=[CorrType|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[CorrType|QualifiedName]
		public CrossReference getTypeCorrTypeCrossReference_3_0() { return cTypeCorrTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeCorrTypeQualifiedNameParserRuleCall_3_0_1() { return cTypeCorrTypeQualifiedNameParserRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//"-src->"
		public Keyword getSrcKeyword_5() { return cSrcKeyword_5; }

		//source=[ObjectVariablePattern]
		public Assignment getSourceAssignment_6() { return cSourceAssignment_6; }

		//[ObjectVariablePattern]
		public CrossReference getSourceObjectVariablePatternCrossReference_6_0() { return cSourceObjectVariablePatternCrossReference_6_0; }

		//ID
		public RuleCall getSourceObjectVariablePatternIDTerminalRuleCall_6_0_1() { return cSourceObjectVariablePatternIDTerminalRuleCall_6_0_1; }

		//"-trg->"
		public Keyword getTrgKeyword_7() { return cTrgKeyword_7; }

		//target=[ObjectVariablePattern]
		public Assignment getTargetAssignment_8() { return cTargetAssignment_8; }

		//[ObjectVariablePattern]
		public CrossReference getTargetObjectVariablePatternCrossReference_8_0() { return cTargetObjectVariablePatternCrossReference_8_0; }

		//ID
		public RuleCall getTargetObjectVariablePatternIDTerminalRuleCall_8_0_1() { return cTargetObjectVariablePatternIDTerminalRuleCall_8_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ObjectVariablePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectVariablePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cSpaceColonSpaceKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeEClassCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeEClassQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cTypeEClassCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLinkVariablePatternsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLinkVariablePatternsLinkVariablePatternParserRuleCall_4_1_0 = (RuleCall)cLinkVariablePatternsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		
		//ObjectVariablePattern:
		//	op=Operator? name=ID " : " type=[ecore::EClass|QualifiedName] ("{" linkVariablePatterns+=LinkVariablePattern* "}")?;
		@Override public ParserRule getRule() { return rule; }

		//op=Operator? name=ID " : " type=[ecore::EClass|QualifiedName] ("{" linkVariablePatterns+=LinkVariablePattern* "}")?
		public Group getGroup() { return cGroup; }

		//op=Operator?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//Operator
		public RuleCall getOpOperatorParserRuleCall_0_0() { return cOpOperatorParserRuleCall_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//" : "
		public Keyword getSpaceColonSpaceKeyword_2() { return cSpaceColonSpaceKeyword_2; }

		//type=[ecore::EClass|QualifiedName]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[ecore::EClass|QualifiedName]
		public CrossReference getTypeEClassCrossReference_3_0() { return cTypeEClassCrossReference_3_0; }

		//QualifiedName
		public RuleCall getTypeEClassQualifiedNameParserRuleCall_3_0_1() { return cTypeEClassQualifiedNameParserRuleCall_3_0_1; }

		//("{" linkVariablePatterns+=LinkVariablePattern* "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//linkVariablePatterns+=LinkVariablePattern*
		public Assignment getLinkVariablePatternsAssignment_4_1() { return cLinkVariablePatternsAssignment_4_1; }

		//LinkVariablePattern
		public RuleCall getLinkVariablePatternsLinkVariablePatternParserRuleCall_4_1_0() { return cLinkVariablePatternsLinkVariablePatternParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }
	}

	public class LinkVariablePatternElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LinkVariablePattern");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeEReferenceCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeEReferenceIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeEReferenceCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTargetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTargetObjectVariablePatternCrossReference_4_0 = (CrossReference)cTargetAssignment_4.eContents().get(0);
		private final RuleCall cTargetObjectVariablePatternIDTerminalRuleCall_4_0_1 = (RuleCall)cTargetObjectVariablePatternCrossReference_4_0.eContents().get(1);
		
		//LinkVariablePattern:
		//	op=Operator? "-" type=[ecore::EReference] "->" target=[ObjectVariablePattern];
		@Override public ParserRule getRule() { return rule; }

		//op=Operator? "-" type=[ecore::EReference] "->" target=[ObjectVariablePattern]
		public Group getGroup() { return cGroup; }

		//op=Operator?
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }

		//Operator
		public RuleCall getOpOperatorParserRuleCall_0_0() { return cOpOperatorParserRuleCall_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//type=[ecore::EReference]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[ecore::EReference]
		public CrossReference getTypeEReferenceCrossReference_2_0() { return cTypeEReferenceCrossReference_2_0; }

		//ID
		public RuleCall getTypeEReferenceIDTerminalRuleCall_2_0_1() { return cTypeEReferenceIDTerminalRuleCall_2_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//target=[ObjectVariablePattern]
		public Assignment getTargetAssignment_4() { return cTargetAssignment_4; }

		//[ObjectVariablePattern]
		public CrossReference getTargetObjectVariablePatternCrossReference_4_0() { return cTargetObjectVariablePatternCrossReference_4_0; }

		//ID
		public RuleCall getTargetObjectVariablePatternIDTerminalRuleCall_4_0_1() { return cTargetObjectVariablePatternIDTerminalRuleCall_4_0_1; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValuePlusSignPlusSignSpaceKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueExclamationMarkSpaceKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//Operator:
		//	value=("++ " | "! ");
		@Override public ParserRule getRule() { return rule; }

		//value=("++ " | "! ")
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"++ " | "! "
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }

		//"++ "
		public Keyword getValuePlusSignPlusSignSpaceKeyword_0_0() { return cValuePlusSignPlusSignSpaceKeyword_0_0; }

		//"! "
		public Keyword getValueExclamationMarkSpaceKeyword_0_1() { return cValueExclamationMarkSpaceKeyword_0_1; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//// Auxiliaries
		// Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ".*";
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName ".*"
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//".*"
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName returns ecore::EString:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final TripleGraphGrammarElements pTripleGraphGrammar;
	private final SpecFileElements pSpecFile;
	private final SchemaElements pSchema;
	private final CorrTypeElements pCorrType;
	private final TypeExtensionElements pTypeExtension;
	private final CorrTypeDefElements pCorrTypeDef;
	private final RuleElements pRule;
	private final AttrCondElements pAttrCond;
	private final AttrCondDefElements pAttrCondDef;
	private final AdornmentElements pAdornment;
	private final ParamElements pParam;
	private final ParamValueElements pParamValue;
	private final CorrVariablePatternElements pCorrVariablePattern;
	private final ObjectVariablePatternElements pObjectVariablePattern;
	private final LinkVariablePatternElements pLinkVariablePattern;
	private final OperatorElements pOperator;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TGGGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTripleGraphGrammar = new TripleGraphGrammarElements();
		this.pSpecFile = new SpecFileElements();
		this.pSchema = new SchemaElements();
		this.pCorrType = new CorrTypeElements();
		this.pTypeExtension = new TypeExtensionElements();
		this.pCorrTypeDef = new CorrTypeDefElements();
		this.pRule = new RuleElements();
		this.pAttrCond = new AttrCondElements();
		this.pAttrCondDef = new AttrCondDefElements();
		this.pAdornment = new AdornmentElements();
		this.pParam = new ParamElements();
		this.pParamValue = new ParamValueElements();
		this.pCorrVariablePattern = new CorrVariablePatternElements();
		this.pObjectVariablePattern = new ObjectVariablePatternElements();
		this.pLinkVariablePattern = new LinkVariablePatternElements();
		this.pOperator = new OperatorElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.moflon.tgg.mosl.TGG".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////TripleGraphGrammar:
	// //  (files += SpecFile)*
	// //;
	// TripleGraphGrammar:
	//	schema=Schema? rules+=Rule?;
	public TripleGraphGrammarElements getTripleGraphGrammarAccess() {
		return pTripleGraphGrammar;
	}
	
	public ParserRule getTripleGraphGrammarRule() {
		return getTripleGraphGrammarAccess().getRule();
	}

	//SpecFile:
	//	Rule | Schema;
	public SpecFileElements getSpecFileAccess() {
		return pSpecFile;
	}
	
	public ParserRule getSpecFileRule() {
		return getSpecFileAccess().getRule();
	}

	//Schema:
	//	imports+=Import* "schema" name=ID ("source" "{" sourceTypes+=[ecore::EPackage|QualifiedName]* "}")? ("target" "{"
	//	targetTypes+=[ecore::EPackage|QualifiedName]* "}")? ("correspondence" "{" correspondenceTypes+=CorrType*
	//	//		correspondenceTypes += [CorrTypeDef | TypeExtension]*
	// //		correspondenceTypes += CorrTypeDef*
	// "}")?
	//	("attribute conditions" "{" attributeCondDefs+=AttrCondDef* "}")?;
	public SchemaElements getSchemaAccess() {
		return pSchema;
	}
	
	public ParserRule getSchemaRule() {
		return getSchemaAccess().getRule();
	}

	//CorrType:
	//	CorrTypeDef | TypeExtension;
	public CorrTypeElements getCorrTypeAccess() {
		return pCorrType;
	}
	
	public ParserRule getCorrTypeRule() {
		return getCorrTypeAccess().getRule();
	}

	//TypeExtension:
	//	name=ID "extends" super=[CorrType];
	public TypeExtensionElements getTypeExtensionAccess() {
		return pTypeExtension;
	}
	
	public ParserRule getTypeExtensionRule() {
		return getTypeExtensionAccess().getRule();
	}

	//CorrTypeDef:
	//	name=ID "{" "-src->" source=[ecore::EClass|QualifiedName] "-trg->" target=[ecore::EClass|QualifiedName] "}";
	public CorrTypeDefElements getCorrTypeDefAccess() {
		return pCorrTypeDef;
	}
	
	public ParserRule getCorrTypeDefRule() {
		return getCorrTypeDefAccess().getRule();
	}

	//Rule:
	//	imports+=Import* abstract?="abstract"? "rule" name=ID ("extends" supertypes+=[Rule])? " with "
	//	schema=[Schema|QualifiedName] ("source" "{" sourcePatterns+=ObjectVariablePattern* "}")? ("target" "{"
	//	targetPatterns+=ObjectVariablePattern* "}")? ("correspondence" "{" correspondencePatterns+=CorrVariablePattern* "}")?
	//	("attribute conditions" "{" attrConditions+=AttrCond* "}")?;
	public RuleElements getRuleAccess() {
		return pRule;
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//AttrCond:
	//	name=[AttrCondDef] "(" (values+=ParamValue ("," values+=ParamValue)*)? ")";
	public AttrCondElements getAttrCondAccess() {
		return pAttrCond;
	}
	
	public ParserRule getAttrCondRule() {
		return getAttrCondAccess().getRule();
	}

	//AttrCondDef:
	//	name=ID "(" (params+=Param ("," params+=Param)*)? ")" "{" "sync:" allowedSyncAdornments+=Adornment (","
	//	allowedAdornments+=Adornment)* "gen:" (allowedGenAdornments+=Adornment ("," allowedAdornments+=Adornment)*)? "}";
	public AttrCondDefElements getAttrCondDefAccess() {
		return pAttrCondDef;
	}
	
	public ParserRule getAttrCondDefRule() {
		return getAttrCondDefAccess().getRule();
	}

	//Adornment:
	//	("B" | "F") ("|" ("B" | "F"))*;
	public AdornmentElements getAdornmentAccess() {
		return pAdornment;
	}
	
	public ParserRule getAdornmentRule() {
		return getAdornmentAccess().getRule();
	}

	//Param:
	//	name=ID ":" type=[ecore::EDataType|QualifiedName];
	public ParamElements getParamAccess() {
		return pParam;
	}
	
	public ParserRule getParamRule() {
		return getParamAccess().getRule();
	}

	//ParamValue:
	//	objectVar=[ObjectVariablePattern] "." type=[ecore::EAttribute];
	public ParamValueElements getParamValueAccess() {
		return pParamValue;
	}
	
	public ParserRule getParamValueRule() {
		return getParamValueAccess().getRule();
	}

	//CorrVariablePattern:
	//	op=Operator? name=ID " : " type=[CorrType|QualifiedName] "{" "-src->" source=[ObjectVariablePattern] "-trg->"
	//	target=[ObjectVariablePattern] "}";
	public CorrVariablePatternElements getCorrVariablePatternAccess() {
		return pCorrVariablePattern;
	}
	
	public ParserRule getCorrVariablePatternRule() {
		return getCorrVariablePatternAccess().getRule();
	}

	//ObjectVariablePattern:
	//	op=Operator? name=ID " : " type=[ecore::EClass|QualifiedName] ("{" linkVariablePatterns+=LinkVariablePattern* "}")?;
	public ObjectVariablePatternElements getObjectVariablePatternAccess() {
		return pObjectVariablePattern;
	}
	
	public ParserRule getObjectVariablePatternRule() {
		return getObjectVariablePatternAccess().getRule();
	}

	//LinkVariablePattern:
	//	op=Operator? "-" type=[ecore::EReference] "->" target=[ObjectVariablePattern];
	public LinkVariablePatternElements getLinkVariablePatternAccess() {
		return pLinkVariablePattern;
	}
	
	public ParserRule getLinkVariablePatternRule() {
		return getLinkVariablePatternAccess().getRule();
	}

	//Operator:
	//	value=("++ " | "! ");
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//// Auxiliaries
	// Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*";
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//QualifiedName returns ecore::EString:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
