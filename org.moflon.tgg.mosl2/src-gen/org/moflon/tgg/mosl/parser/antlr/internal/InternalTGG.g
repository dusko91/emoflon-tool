/*
 * generated by Xtext
 */
grammar InternalTGG;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.moflon.tgg.mosl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.moflon.tgg.mosl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.moflon.tgg.mosl.services.TGGGrammarAccess;

}

@parser::members {

 	private TGGGrammarAccess grammarAccess;
 	
    public InternalTGGParser(TokenStream input, TGGGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "TripleGraphGrammar";	
   	}
   	
   	@Override
   	protected TGGGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTripleGraphGrammar
entryRuleTripleGraphGrammar returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTripleGraphGrammarRule()); }
	 iv_ruleTripleGraphGrammar=ruleTripleGraphGrammar 
	 { $current=$iv_ruleTripleGraphGrammar.current; } 
	 EOF 
;

// Rule TripleGraphGrammar
ruleTripleGraphGrammar returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTripleGraphGrammarAccess().getSchemaSchemaParserRuleCall_0_0()); 
	    }
		lv_schema_0_0=ruleSchema		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTripleGraphGrammarRule());
	        }
       		set(
       			$current, 
       			"schema",
        		lv_schema_0_0, 
        		"Schema");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTripleGraphGrammarAccess().getRulesRuleParserRuleCall_1_0()); 
	    }
		lv_rules_1_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTripleGraphGrammarRule());
	        }
       		add(
       			$current, 
       			"rules",
        		lv_rules_1_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;







// Entry rule entryRuleSchema
entryRuleSchema returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSchemaRule()); }
	 iv_ruleSchema=ruleSchema 
	 { $current=$iv_ruleSchema.current; } 
	 EOF 
;

// Rule Schema
ruleSchema returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_1='schema' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSchemaAccess().getSchemaKeyword_1());
    }
(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getSchemaAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSchemaRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)(	otherlv_3='source' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSchemaAccess().getSourceKeyword_3_0());
    }
	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSchemaAccess().getLeftCurlyBracketKeyword_3_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSchemaRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getSourceTypesEPackageCrossReference_3_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getSchemaAccess().getRightCurlyBracketKeyword_3_3());
    }
)?(	otherlv_7='target' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSchemaAccess().getTargetKeyword_4_0());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getSchemaAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSchemaRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getTargetTypesEPackageCrossReference_4_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSchemaAccess().getRightCurlyBracketKeyword_4_3());
    }
)?(	otherlv_11='correspondence' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getSchemaAccess().getCorrespondenceKeyword_5_0());
    }
	otherlv_12='{' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getSchemaAccess().getLeftCurlyBracketKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getCorrespondenceTypesCorrTypeParserRuleCall_5_2_0()); 
	    }
		lv_correspondenceTypes_13_0=ruleCorrType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaRule());
	        }
       		add(
       			$current, 
       			"correspondenceTypes",
        		lv_correspondenceTypes_13_0, 
        		"CorrType");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_14='}' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getSchemaAccess().getRightCurlyBracketKeyword_5_3());
    }
)?(	otherlv_15='attribute conditions' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getSchemaAccess().getAttributeConditionsKeyword_6_0());
    }
	otherlv_16='{' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getSchemaAccess().getLeftCurlyBracketKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSchemaAccess().getAttributeCondDefsAttrCondDefParserRuleCall_6_2_0()); 
	    }
		lv_attributeCondDefs_17_0=ruleAttrCondDef		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSchemaRule());
	        }
       		add(
       			$current, 
       			"attributeCondDefs",
        		lv_attributeCondDefs_17_0, 
        		"AttrCondDef");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_18='}' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getSchemaAccess().getRightCurlyBracketKeyword_6_3());
    }
)?)
;





// Entry rule entryRuleCorrType
entryRuleCorrType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCorrTypeRule()); }
	 iv_ruleCorrType=ruleCorrType 
	 { $current=$iv_ruleCorrType.current; } 
	 EOF 
;

// Rule CorrType
ruleCorrType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCorrTypeAccess().getCorrTypeDefParserRuleCall_0()); 
    }
    this_CorrTypeDef_0=ruleCorrTypeDef
    { 
        $current = $this_CorrTypeDef_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCorrTypeAccess().getTypeExtensionParserRuleCall_1()); 
    }
    this_TypeExtension_1=ruleTypeExtension
    { 
        $current = $this_TypeExtension_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleTypeExtension
entryRuleTypeExtension returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeExtensionRule()); }
	 iv_ruleTypeExtension=ruleTypeExtension 
	 { $current=$iv_ruleTypeExtension.current; } 
	 EOF 
;

// Rule TypeExtension
ruleTypeExtension returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getTypeExtensionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeExtensionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='extends' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTypeExtensionAccess().getExtendsKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTypeExtensionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTypeExtensionAccess().getSuperCorrTypeCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleCorrTypeDef
entryRuleCorrTypeDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCorrTypeDefRule()); }
	 iv_ruleCorrTypeDef=ruleCorrTypeDef 
	 { $current=$iv_ruleCorrTypeDef.current; } 
	 EOF 
;

// Rule CorrTypeDef
ruleCorrTypeDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getCorrTypeDefAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCorrTypeDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCorrTypeDefAccess().getLeftCurlyBracketKeyword_1());
    }
	otherlv_2='-src->' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCorrTypeDefAccess().getSrcKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCorrTypeDefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCorrTypeDefAccess().getSourceEClassCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='-trg->' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCorrTypeDefAccess().getTrgKeyword_4());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCorrTypeDefRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCorrTypeDefAccess().getTargetEClassCrossReference_5_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getCorrTypeDefAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getImportsImportParserRuleCall_0_0()); 
	    }
		lv_imports_0_0=ruleImport		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"imports",
        		lv_imports_0_0, 
        		"Import");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		lv_abstract_1_0=	'abstract' 
    {
        newLeafNode(lv_abstract_1_0, grammarAccess.getRuleAccess().getAbstractAbstractKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
       		setWithLastConsumed($current, "abstract", true, "abstract");
	    }

)
)?	otherlv_2='rule' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleAccess().getRuleKeyword_2());
    }
(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getRuleAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)(	otherlv_4='extends' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getRuleAccess().getExtendsKeyword_4_0());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getRuleAccess().getSupertypesRuleCrossReference_4_1_0()); 
	}

)
))?	otherlv_6=' with ' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getRuleAccess().getWithKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRuleRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getSchemaSchemaCrossReference_6_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8='source' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getRuleAccess().getSourceKeyword_7_0());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getSourcePatternsObjectVariablePatternParserRuleCall_7_2_0()); 
	    }
		lv_sourcePatterns_10_0=ruleObjectVariablePattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"sourcePatterns",
        		lv_sourcePatterns_10_0, 
        		"ObjectVariablePattern");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_7_3());
    }
)?(	otherlv_12='target' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getRuleAccess().getTargetKeyword_8_0());
    }
	otherlv_13='{' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_8_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getTargetPatternsObjectVariablePatternParserRuleCall_8_2_0()); 
	    }
		lv_targetPatterns_14_0=ruleObjectVariablePattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"targetPatterns",
        		lv_targetPatterns_14_0, 
        		"ObjectVariablePattern");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_8_3());
    }
)?(	otherlv_16='correspondence' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getRuleAccess().getCorrespondenceKeyword_9_0());
    }
	otherlv_17='{' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getCorrespondencePatternsCorrVariablePatternParserRuleCall_9_2_0()); 
	    }
		lv_correspondencePatterns_18_0=ruleCorrVariablePattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"correspondencePatterns",
        		lv_correspondencePatterns_18_0, 
        		"CorrVariablePattern");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_19='}' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_9_3());
    }
)?(	otherlv_20='attribute conditions' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getRuleAccess().getAttributeConditionsKeyword_10_0());
    }
	otherlv_21='{' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getRuleAccess().getLeftCurlyBracketKeyword_10_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getAttrConditionsAttrCondParserRuleCall_10_2_0()); 
	    }
		lv_attrConditions_22_0=ruleAttrCond		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		add(
       			$current, 
       			"attrConditions",
        		lv_attrConditions_22_0, 
        		"AttrCond");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_23='}' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getRuleAccess().getRightCurlyBracketKeyword_10_3());
    }
)?)
;





// Entry rule entryRuleAttrCond
entryRuleAttrCond returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrCondRule()); }
	 iv_ruleAttrCond=ruleAttrCond 
	 { $current=$iv_ruleAttrCond.current; } 
	 EOF 
;

// Rule AttrCond
ruleAttrCond returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttrCondRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getAttrCondAccess().getNameAttrCondDefCrossReference_0_0()); 
	}

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttrCondAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttrCondAccess().getValuesParamValueParserRuleCall_2_0_0()); 
	    }
		lv_values_2_0=ruleParamValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrCondRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_2_0, 
        		"ParamValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttrCondAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrCondAccess().getValuesParamValueParserRuleCall_2_1_1_0()); 
	    }
		lv_values_4_0=ruleParamValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrCondRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_4_0, 
        		"ParamValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttrCondAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleAttrCondDef
entryRuleAttrCondDef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttrCondDefRule()); }
	 iv_ruleAttrCondDef=ruleAttrCondDef 
	 { $current=$iv_ruleAttrCondDef.current; } 
	 EOF 
;

// Rule AttrCondDef
ruleAttrCondDef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAttrCondDefAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttrCondDefRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAttrCondDefAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttrCondDefAccess().getParamsParamParserRuleCall_2_0_0()); 
	    }
		lv_params_2_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrCondDefRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getAttrCondDefAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrCondDefAccess().getParamsParamParserRuleCall_2_1_1_0()); 
	    }
		lv_params_4_0=ruleParam		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrCondDefRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"Param");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getAttrCondDefAccess().getRightParenthesisKeyword_3());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getAttrCondDefAccess().getLeftCurlyBracketKeyword_4());
    }
	otherlv_7='sync:' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getAttrCondDefAccess().getSyncKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrCondDefAccess().getAllowedSyncAdornmentsAdornmentParserRuleCall_6_0()); 
	    }
		lv_allowedSyncAdornments_8_0=ruleAdornment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrCondDefRule());
	        }
       		add(
       			$current, 
       			"allowedSyncAdornments",
        		lv_allowedSyncAdornments_8_0, 
        		"Adornment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getAttrCondDefAccess().getCommaKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrCondDefAccess().getAllowedAdornmentsAdornmentParserRuleCall_7_1_0()); 
	    }
		lv_allowedAdornments_10_0=ruleAdornment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrCondDefRule());
	        }
       		add(
       			$current, 
       			"allowedAdornments",
        		lv_allowedAdornments_10_0, 
        		"Adornment");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_11='gen:' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getAttrCondDefAccess().getGenKeyword_8());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAttrCondDefAccess().getAllowedGenAdornmentsAdornmentParserRuleCall_9_0_0()); 
	    }
		lv_allowedGenAdornments_12_0=ruleAdornment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrCondDefRule());
	        }
       		add(
       			$current, 
       			"allowedGenAdornments",
        		lv_allowedGenAdornments_12_0, 
        		"Adornment");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getAttrCondDefAccess().getCommaKeyword_9_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAttrCondDefAccess().getAllowedAdornmentsAdornmentParserRuleCall_9_1_1_0()); 
	    }
		lv_allowedAdornments_14_0=ruleAdornment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAttrCondDefRule());
	        }
       		add(
       			$current, 
       			"allowedAdornments",
        		lv_allowedAdornments_14_0, 
        		"Adornment");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getAttrCondDefAccess().getRightCurlyBracketKeyword_10());
    }
)
;





// Entry rule entryRuleAdornment
entryRuleAdornment returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAdornmentRule()); } 
	 iv_ruleAdornment=ruleAdornment 
	 { $current=$iv_ruleAdornment.current.getText(); }  
	 EOF 
;

// Rule Adornment
ruleAdornment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='B' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdornmentAccess().getBKeyword_0_0()); 
    }

    |
	kw='F' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdornmentAccess().getFKeyword_0_1()); 
    }
)(
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdornmentAccess().getVerticalLineKeyword_1_0()); 
    }
(
	kw='B' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdornmentAccess().getBKeyword_1_1_0()); 
    }

    |
	kw='F' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAdornmentAccess().getFKeyword_1_1_1()); 
    }
))*)
    ;





// Entry rule entryRuleParam
entryRuleParam returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamRule()); }
	 iv_ruleParam=ruleParam 
	 { $current=$iv_ruleParam.current; } 
	 EOF 
;

// Rule Param
ruleParam returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getParamAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)	otherlv_1=':' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamAccess().getColonKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getParamAccess().getTypeEDataTypeCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParamValue
entryRuleParamValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamValueRule()); }
	 iv_ruleParamValue=ruleParamValue 
	 { $current=$iv_ruleParamValue.current; } 
	 EOF 
;

// Rule ParamValue
ruleParamValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamValueRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getParamValueAccess().getObjectVarObjectVariablePatternCrossReference_0_0()); 
	}

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParamValueAccess().getFullStopKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamValueRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getParamValueAccess().getTypeEAttributeCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleCorrVariablePattern
entryRuleCorrVariablePattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCorrVariablePatternRule()); }
	 iv_ruleCorrVariablePattern=ruleCorrVariablePattern 
	 { $current=$iv_ruleCorrVariablePattern.current; } 
	 EOF 
;

// Rule CorrVariablePattern
ruleCorrVariablePattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getCorrVariablePatternAccess().getOpOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCorrVariablePatternRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCorrVariablePatternAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCorrVariablePatternRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=' : ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getCorrVariablePatternAccess().getSpaceColonSpaceKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCorrVariablePatternRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getCorrVariablePatternAccess().getTypeCorrTypeCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getCorrVariablePatternAccess().getLeftCurlyBracketKeyword_4());
    }
	otherlv_5='-src->' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getCorrVariablePatternAccess().getSrcKeyword_5());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCorrVariablePatternRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getCorrVariablePatternAccess().getSourceObjectVariablePatternCrossReference_6_0()); 
	}

)
)	otherlv_7='-trg->' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getCorrVariablePatternAccess().getTrgKeyword_7());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCorrVariablePatternRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getCorrVariablePatternAccess().getTargetObjectVariablePatternCrossReference_8_0()); 
	}

)
)	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getCorrVariablePatternAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleObjectVariablePattern
entryRuleObjectVariablePattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectVariablePatternRule()); }
	 iv_ruleObjectVariablePattern=ruleObjectVariablePattern 
	 { $current=$iv_ruleObjectVariablePattern.current; } 
	 EOF 
;

// Rule ObjectVariablePattern
ruleObjectVariablePattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getObjectVariablePatternAccess().getOpOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectVariablePatternRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getObjectVariablePatternAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectVariablePatternRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2=' : ' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getObjectVariablePatternAccess().getSpaceColonSpaceKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getObjectVariablePatternRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getObjectVariablePatternAccess().getTypeEClassCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getObjectVariablePatternAccess().getLeftCurlyBracketKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectVariablePatternAccess().getLinkVariablePatternsLinkVariablePatternParserRuleCall_4_1_0()); 
	    }
		lv_linkVariablePatterns_5_0=ruleLinkVariablePattern		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectVariablePatternRule());
	        }
       		add(
       			$current, 
       			"linkVariablePatterns",
        		lv_linkVariablePatterns_5_0, 
        		"LinkVariablePattern");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getObjectVariablePatternAccess().getRightCurlyBracketKeyword_4_2());
    }
)?)
;





// Entry rule entryRuleLinkVariablePattern
entryRuleLinkVariablePattern returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkVariablePatternRule()); }
	 iv_ruleLinkVariablePattern=ruleLinkVariablePattern 
	 { $current=$iv_ruleLinkVariablePattern.current; } 
	 EOF 
;

// Rule LinkVariablePattern
ruleLinkVariablePattern returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLinkVariablePatternAccess().getOpOperatorParserRuleCall_0_0()); 
	    }
		lv_op_0_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkVariablePatternRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_1='-' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinkVariablePatternAccess().getHyphenMinusKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkVariablePatternRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getLinkVariablePatternAccess().getTypeEReferenceCrossReference_2_0()); 
	}

)
)	otherlv_3='->' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getLinkVariablePatternAccess().getHyphenMinusGreaterThanSignKeyword_3());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLinkVariablePatternRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getLinkVariablePatternAccess().getTargetObjectVariablePatternCrossReference_4_0()); 
	}

)
))
;





// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current; } 
	 EOF 
;

// Rule Operator
ruleOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_value_0_1=	'++ ' 
    {
        newLeafNode(lv_value_0_1, grammarAccess.getOperatorAccess().getValuePlusSignPlusSignSpaceKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_1, null);
	    }

    |		lv_value_0_2=	'! ' 
    {
        newLeafNode(lv_value_0_2, grammarAccess.getOperatorAccess().getValueExclamationMarkSpaceKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_0_2, null);
	    }

)

)
)
;





// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	 iv_ruleImport=ruleImport 
	 { $current=$iv_ruleImport.current; } 
	 EOF 
;

// Rule Import
ruleImport returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); 
	    }
		lv_importedNamespace_1_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getImportRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_1_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


