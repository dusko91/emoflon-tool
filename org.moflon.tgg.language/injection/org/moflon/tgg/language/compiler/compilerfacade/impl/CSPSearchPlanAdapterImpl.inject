
import java.util.List;
import java.util.ArrayList;
import org.moflon.csp.CSPNotSolvableException;
import org.moflon.csp.solver.CodeGeneratorChain;
import org.moflon.csp.solver.SearchPlanAction;
import org.moflon.csp.solver.SimpleCombiner;
import org.moflon.tgg.language.csp.TGGConstraint;

partial class CSPSearchPlanAdapterImpl {

@members <--

   private List<TGGConstraint> createConstraintList(final SimpleCombiner combiner)
   {
      List<TGGConstraint> result = new ArrayList<TGGConstraint>();

      CodeGeneratorChain<TGGConstraint> codeGeneratorChain = combiner.getRoot();
      result.add(codeGeneratorChain.getValue());
      while ((codeGeneratorChain = codeGeneratorChain.getNext()) != null)
      {
         result.add(codeGeneratorChain.getValue());
      }

      return reverse(result);
   }

   private List<TGGConstraint> reverse(final List<TGGConstraint> list)
   {
      List<TGGConstraint> result = new ArrayList<TGGConstraint>();
      for (int i = 0; i < list.size(); i++)
      {
         result.add(list.get(list.size() - 1 - i));
      }
      return result;
   }
   
-->

@model computeConstraintOrder (OperationalCSP csp) <--

      if (csp.getConstraints().isEmpty())
         return;

      SimpleCombiner combiner = new SearchPlanAction().sortConstraints(csp.getConstraints(), csp.getVariables());
      List<TGGConstraint> sortedConstraints = createConstraintList(combiner);
      csp.getConstraints().clear();
      csp.getConstraints().addAll(sortedConstraints);
-->

}