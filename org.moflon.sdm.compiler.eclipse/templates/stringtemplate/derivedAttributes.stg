// This template group contains rules for generating code that updates derived attributes.


////// Code templates for pull-based approach //////

// Getter code template for a primitive type derived feature.
preGetGenFeaturePrimitiveType(genFeature, genFeatureType, calculationMethodName) ::= <<<\n>
    // Feature '<genFeature.name>' is derived.
    final <genFeatureType> derived<genFeature.capName> = <calculationMethodName>();
    if (derived<genFeature.capName> != <genFeature.safeName>) {
    	set<genFeature.accessorName>(derived<genFeature.capName>);
    }
>>

// Getter code template for a reference type derived feature.
preGetGenFeatureReferenceType(genFeature, genFeatureType, calculationMethodName) ::= <<<\n>
	// Feature '<genFeature.name>' is derived.
    final <genFeatureType> derived<genFeature.capName> = <calculationMethodName>();
    if (derived<genFeature.capName> != null) {
	    if (!derived<genFeature.capName>.equals(<genFeature.safeName>)) {
	    	set<genFeature.accessorName>(derived<genFeature.capName>);
	    }
    } else {
    	set<genFeature.accessorName>(null);
    }
>>



////// Code templates for pull-based approach //////

// Constructor code template for a primitive type derived feature.
preConstructorGenFeaturePrimitiveType(genFeature, genFeatureType, calculationMethodName, dependentFeatures) ::= <<<\n>
    org.eclipse.emf.ecore.util.EContentAdapter <genFeature.safeName>Adapter = new org.eclipse.emf.ecore.util.EContentAdapter() {
        @Override
        public void notifyChanged(Notification notification) {
            super.notifyChanged(notification);
            if (notification.getFeature() instanceof org.eclipse.emf.ecore.EStructuralFeature) {
                if (notification.getEventType() == Notification.SET || notification.getEventType() == Notification.ADD || notification.getEventType() == Notification.REMOVE) {
                	org.eclipse.emf.ecore.EStructuralFeature notificationFeature = (org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature();
                	if (notificationFeature != null && notificationFeature.getName() != null) { 
                		<genFeatureType> derived<genFeature.capName>;
	                    <dependentFeatures: { dependentFeature |
	                    	<calculatePrimitiveTypeFeature(genFeature, genFeatureType, calculationMethodName, dependentFeatures)> }>
                	}
                }
            }
        }
    };
    this.eAdapters().add(<genFeature.safeName>Adapter);
>>

// Constructor code template for a reference type derived feature.
preConstructorGenFeatureReferenceType(genFeature, genFeatureType, calculationMethodName, dependentFeatures) ::= <<<\n>
    org.eclipse.emf.ecore.util.EContentAdapter <genFeature.safeName>Adapter = new org.eclipse.emf.ecore.util.EContentAdapter() {
        @Override
        public void notifyChanged(Notification notification) {
            super.notifyChanged(notification);
            if (notification.getFeature() instanceof org.eclipse.emf.ecore.EStructuralFeature) {
                if (notification.getEventType() == Notification.SET || notification.getEventType() == Notification.ADD || notification.getEventType() == Notification.REMOVE) {
                	org.eclipse.emf.ecore.EStructuralFeature notificationFeature = (org.eclipse.emf.ecore.EStructuralFeature) notification.getFeature();
                    if (notificationFeature != null && notificationFeature.getName() != null) { 
	                    <genFeatureType> derived<genFeature.capName>;
	                    <dependentFeatures: { dependentFeature |
	                    	<calculateReferenceTypeFeature(genFeature, genFeatureType, calculationMethodName, dependentFeatures)> }>
                	}
                }
            }
        }
    };
    this.eAdapters().add(<genFeature.safeName>Adapter);
>>

// Code template for a primitive type derived feature that calculates and sets the derived feature.
calculatePrimitiveTypeFeature(genFeature, genFeatureType, calculationMethodName, dependentFeatures) ::= <<<\n>
	if (notificationFeature.getName().equals("<dependentFeature.name>")) {
	    derived<genFeature.capName> = <calculationMethodName>();
	    if (derived<genFeature.capName> != <genFeature.safeName>) {
	    	set<genFeature.accessorName>(derived<genFeature.capName>);
	    }
	}
>>

// Code template for a reference type derived feature that calculates and sets the derived feature.
calculateReferenceTypeFeature(genFeature, genFeatureType, calculationMethodName, dependentFeatures) ::= <<<\n>
	if (notificationFeature.getName().equals("<dependentFeature.name>")) {
	    derived<genFeature.capName> = <calculationMethodName>();
	    if (derived<genFeature.capName> != null) {
		    if (!derived<genFeature.capName>.equals(<genFeature.safeName>)) {
		    	set<genFeature.accessorName>(derived<genFeature.capName>);
		    }
	    } else {
	    	set<genFeature.accessorName>(null);
	    }
	}
>>



// Code template for a derived feature of an unknown type.
genFeatureUnknownType(genFeature, genFeatureType, calculationMethodName) ::= <<<\n>
    // Feature '<genFeature.name>' is derived, but no code
    // has been generated, because its type is unknown.
>>

// Code template for a derived feature if no calculation method is found.
genFeatureNoOperation(genFeature, genFeatureType, calculationMethodName) ::= <<<\n>
    // Feature '<genFeature.name>' is derived, but expected calculation
    // method '_get<genFeature.capName>(): <genFeature.typeGenDataType.name>' does not exist.
>>
