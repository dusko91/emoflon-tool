grammar org.moflon.tgg.mosl.TGG with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate tgg "http://www.moflon.org/ide/tgg/mosl/TGG"

TripleGraphGrammarFile:
	(schema = Schema)?
  	(rules += Rule)*
  	(library = AttrCondDefLibrary)?
;

Schema:
	imports += Import*	
	using += Using*	
	'schema' name = QualifiedName
		
	('source' '{'
		sourceTypes += [ecore::EPackage | QualifiedName]*
	'}')? 
	
	('target' '{'
		targetTypes += [ecore::EPackage | QualifiedName]*
	'}')? 

	('correspondence' '{'
		correspondenceTypes += CorrType*
	'}')?	
	
	('attribute conditions' '{'
		attributeCondDefs += AttrCondDef*
	'}')? 
;

CorrType:
	(CorrTypeDef | TypeExtension)
;

TypeExtension:
	name = ID 'extends' super=[CorrType]
;

CorrTypeDef:
	name = ID '{'
		'-src->' source = [ecore::EClass | QualifiedName]  
		'-trg->' target = [ecore::EClass | QualifiedName]
	'}'
;

Rule:
	imports += Import*	
	using += Using*	
	(abstractRule ?= 'abstract')? 'rule' name = ID ('extends' supertypes += [Rule])? ' with ' schema = [Schema | QualifiedName]
		
	('source' '{'
		sourcePatterns += ObjectVariablePattern* 
	'}')? 	
	
	('target' '{'
		targetPatterns += ObjectVariablePattern* 
	'}')? 
	
	('correspondence' '{'
		correspondencePatterns += CorrVariablePattern*	
	'}')? 

	('attribute conditions' '{'
		attrConditions += AttrCond*
	'}')? 
;

AttrCond:
	name = [AttrCondDef] '(' (values += ParamValue (',' values += ParamValue)*)? ')'
;

AttrCondDef:
	name = ID '(' (params += Param (',' params += Param)*)? ')' '{'
		'sync:'
			allowedSyncAdornments += Adornment (',' allowedSyncAdornments += Adornment)*
		'gen:'
			(allowedGenAdornments += Adornment (',' allowedGenAdornments += Adornment )*)?
	'}'
;
AttrCondDefLibrary:
	'library' name = QualifiedName
	('{'
		attributeCondDefs += AttrCondDef*
	'}')?
;

Adornment:
	value = ID
;

Param:
	index = INT ':' type = ParamType
;

ParamValue:
	(AttributeVariable | LocalVariable | Literal)
;

AttributeVariable:
	objectVar = [ObjectVariablePattern] '.' attribute = ID
;

LocalVariable:
	name = ID
;

Literal:
	value = LiteralValue
;

CorrVariablePattern:
	(op = Operator)? name = ID ' : ' type = [CorrType | QualifiedName] '{'
		'-src->' source = [ObjectVariablePattern]
		'-trg->' target = [ObjectVariablePattern]
	'}' 
;

ObjectVariablePattern:
	(op = Operator)? name = ID ' : ' type = [ecore::EClass | QualifiedName] ('{'
		attributeAssignments += AttributeAssignment*
		attributeConstraints += AttributeConstraint*
		linkVariablePatterns += LinkVariablePattern*
	'}')? 
;

AttributeConstraint:
	attribute = [ecore::EAttribute] op=ComparisonOperator valueExp = Expression
;

AttributeAssignment:
	attribute = [ecore::EAttribute] op=' := ' valueExp = Expression
;

Expression:
	(LiteralExpression | AttributeExpression)
;

AttributeExpression:
	objectVar = [ObjectVariablePattern] '.' attribute = [ecore::EAttribute]
;

LiteralExpression:
	value = LiteralExpressionValue
;

LinkVariablePattern:
	(op = Operator)? '-' type = [ecore::EReference] '->' target = [ObjectVariablePattern]
;

Operator:
	value = ('++ ' | '! ')
;

// Auxiliaries

Import:
	'import' name=STRING
;

Using:
	'using' importedNamespace = QualifiedNameWithWildcard
;

terminal DECIMAL: INT '.' INT;

ComparisonOperator:
	(' == ' | ' != ' | ' <= ' | ' >= ' | ' > ' | ' < ')
;

LiteralExpressionValue:
	(ID | STRING | INT | DECIMAL)
;

LiteralValue:
	(STRING | INT | DECIMAL)
;

ParamType returns ecore::EString:
	(ID)?
;

QualifiedNameWithWildcard:
	QualifiedName '.*'
;

QualifiedName returns ecore::EString:
	ID ('.' ID)*
;
