grammar org.moflon.tgg.mosl.TGG with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate tgg "http://www.moflon.org/ide/tgg/mosl/TGG"

TripleGraphGrammarFile:
	(schema = Schema)?
  	(rules += Rule)*
;

Schema:
	imports += Import*	
	'schema' name = ID
		
	('source' '{'
		sourceTypes += [ecore::EPackage | QualifiedName]*
	'}')? 
	
	('target' '{'
		targetTypes += [ecore::EPackage | QualifiedName]*
	'}')? 

	('correspondence' '{'
		correspondenceTypes += CorrType*
	'}')?	
	
	('attribute conditions' '{'
		attributeCondDefs += AttrCondDef*
	'}')? 
;

CorrType:
	(CorrTypeDef | TypeExtension)	
;

TypeExtension:
	name = ID 'extends' super=[CorrType]
;

CorrTypeDef:
	name = ID '{'
		'-src->' source = [ecore::EClass | QualifiedName]  
		'-trg->' target = [ecore::EClass | QualifiedName]
	'}'
;

Rule:
	imports += Import*	
	(abstract ?= 'abstract')? 'rule' name = ID ('extends' supertypes += [Rule])? ' with ' schema = [Schema | QualifiedName]
		
	('source' '{'
		sourcePatterns += ObjectVariablePattern* 
	'}')? 	
	
	('target' '{'
		targetPatterns += ObjectVariablePattern* 
	'}')? 
	
	('correspondence' '{'
		correspondencePatterns += CorrVariablePattern*	
	'}')? 

	('attribute conditions' '{'
		attrConditions += AttrCond*
	'}')? 
;

AttrCond:
	name = [AttrCondDef] '(' (values += ParamValue (',' values += ParamValue)*)? ')' 
;

AttrCondDef:
	name = ID '(' (params += Param (',' params += Param)*)? ')' '{'
		'sync:'
			allowedSyncAdornments += Adornment (',' allowedAdornments += Adornment)*
		'gen:'
			(allowedGenAdornments += Adornment (',' allowedAdornments += Adornment )*)?
	'}'
;

Adornment:
	('B' | 'F') ('|' ('B' | 'F'))* 
;

Param:
	name = ID ':' type = [ecore::EDataType | QualifiedName]
;

ParamValue:
	objectVar = [ObjectVariablePattern] '.' type = [ecore::EAttribute]
;

CorrVariablePattern:
	(op = Operator)? name = ID ' : ' type = [CorrType | QualifiedName] '{'
		'-src->' source = [ObjectVariablePattern]
		'-trg->' target = [ObjectVariablePattern]
	'}' 
;

ObjectVariablePattern:
	(op = Operator)? name = ID ' : ' type = [ecore::EClass | QualifiedName] ('{'
		linkVariablePatterns += LinkVariablePattern*
	'}')? 
;

LinkVariablePattern:
	(op = Operator)? '-' type = [ecore::EReference] '->' target = [ObjectVariablePattern]
;

Operator:
	value = ('++ ' | '! ')
;

// Auxiliaries

Import:
	'import' importedNamespace = QualifiedNameWithWildcard
;

QualifiedNameWithWildcard:
	QualifiedName '.*'
;

QualifiedName returns ecore::EString:
	ID ('.' ID)*
;
