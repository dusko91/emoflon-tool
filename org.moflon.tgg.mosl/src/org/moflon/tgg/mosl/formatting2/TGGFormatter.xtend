/*
 * generated by Xtext
 */
package org.moflon.tgg.mosl.formatting2;

import com.google.inject.Inject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.moflon.tgg.mosl.services.TGGGrammarAccess;
import org.moflon.tgg.mosl.tgg.AttrCond;
import org.moflon.tgg.mosl.tgg.AttrCondDef;
import org.moflon.tgg.mosl.tgg.CorrType;
import org.moflon.tgg.mosl.tgg.CorrVariablePattern;
import org.moflon.tgg.mosl.tgg.Import;
import org.moflon.tgg.mosl.tgg.LinkVariablePattern;
import org.moflon.tgg.mosl.tgg.ObjectVariablePattern;
import org.moflon.tgg.mosl.tgg.Param;
import org.moflon.tgg.mosl.tgg.ParamValue;
import org.moflon.tgg.mosl.tgg.Rule;
import org.moflon.tgg.mosl.tgg.Schema;
import org.moflon.tgg.mosl.tgg.TripleGraphGrammarFile;

import static org.moflon.tgg.mosl.tgg.TggPackage.Literals.*
import org.moflon.tgg.mosl.tgg.CorrTypeDef
import org.eclipse.emf.ecore.EPackage
import org.eclipse.xtext.formatting2.regionaccess.ITextRegionExtensions
import org.eclipse.emf.ecore.EObject
import org.moflon.tgg.mosl.tgg.AttrCondDefLibrary

class TGGFormatter extends AbstractFormatter2 {
	
	@Inject extension TGGGrammarAccess

	def dispatch void format(TripleGraphGrammarFile triplegraphgrammarfile, extension IFormattableDocument document) {
		format(triplegraphgrammarfile.getSchema(), document);
		for (Rule rules : triplegraphgrammarfile.getRules()) {
			format(rules, document);
		}
		format(triplegraphgrammarfile.library, document);
	}
	def dispatch void format(AttrCondDefLibrary library, extension IFormattableDocument document) {
//		library.regionFor.keyword("library").append[newLine]
		for (AttrCondDef attrCondDef : library.attributeCondDefs) {
			format(attrCondDef, document);
		}
	}

	def dispatch void format(Schema schema, extension IFormattableDocument document) {
		schema.append[newLines = 3]
		schema.regionFor.keyword("schema").prepend[setNewLines(2);highPriority]
		schema.regionFor.keyword("source").prepend[setNewLines(2)]
		schema.regionFor.keywordPairs("source", "}").get(0).interior[indent]
		schema.regionFor.keyword("target").prepend[setNewLines(2)]
		schema.regionFor.keywordPairs("target", "}").get(0).interior[indent]
		schema.regionFor.keyword("correspondence").prepend[setNewLines(2)]
		schema.regionFor.keyword("attribute conditions").prepend[setNewLines(2)]
		
		schema.regionFor.feature(SCHEMA__SOURCE_TYPES).surround[newLine]
		schema.regionFor.feature(SCHEMA__TARGET_TYPES).surround[newLine]
		
		for (Import imports : schema.getImports()) {
			imports.append[newLine]
		}
		for (CorrType correspondenceTypes : schema.getCorrespondenceTypes()) {
			format(correspondenceTypes, document);
		}
		for (AttrCondDef attributeCondDefs : schema.getAttributeCondDefs()) {
			format(attributeCondDefs, document);
		}
	}

	def dispatch void format(Rule rule, extension IFormattableDocument document) {
		rule.append[newLines = 3]
		rule.regionFor.keyword("rule").prepend[setNewLines(2);highPriority]
		rule.regionFor.keyword(" with ").surround[noSpace]
		rule.regionFor.keyword("source").prepend[setNewLines(2)]
		rule.regionFor.keyword("target").prepend[setNewLines(2)]
		rule.regionFor.keyword("correspondence").prepend[setNewLines(2)]
		rule.regionFor.keyword("attribute conditions").prepend[setNewLines(2)]
		
		for (Import imports : rule.getImports()) {
			imports.append[newLine]
		}
		for (ObjectVariablePattern sourcePatterns : rule.getSourcePatterns()) {
			format(sourcePatterns, document);
		}
		for (ObjectVariablePattern targetPatterns : rule.getTargetPatterns()) {
			format(targetPatterns, document);
		}
		for (CorrVariablePattern correspondencePatterns : rule.getCorrespondencePatterns()) {
			format(correspondencePatterns, document);
		}
		for (AttrCond attrConditions : rule.getAttrConditions()) {
			format(attrConditions, document);
		}
	}
	def dispatch void format(CorrType correspondenceType, extension IFormattableDocument document) {
		correspondenceType.surround[newLine]
		correspondenceType.surround[indent]
		correspondenceType.interior[indent]
		if(correspondenceType instanceof CorrTypeDef){
			correspondenceType.regionFor.keyword("-src->").prepend[newLine].append[noSpace]
			correspondenceType.regionFor.keyword("-trg->").prepend[newLine].append[noSpace]
			correspondenceType.regionFor.keyword("}").prepend[newLine]
		}
	}

	def dispatch void format(AttrCond attrcond, extension IFormattableDocument document) {
		attrcond.surround[newLine]
		attrcond.regionFor.feature(ATTR_COND__NAME).prepend[newLine]
		attrcond.regionFor.keyword("(").surround[noSpace]
		attrcond.surround[indent]
		for (ParamValue values : attrcond.getValues()) {
			values.append[noSpace]
			values.regionFor.keyword(".").surround[noSpace]
		}
	}

	def dispatch void format(AttrCondDef attrconddef, extension IFormattableDocument document) {
		attrconddef.surround[newLine]
		attrconddef.surround[indent]
		attrconddef.interior[indent]
		attrconddef.regionFor.keyword("(").surround[noSpace]
		attrconddef.regionFor.keyword("sync:").prepend[newLine]
		attrconddef.regionFor.keyword("gen:").prepend[newLine]
		attrconddef.regionFor.keyword("}").surround[newLine]
		for (Param params : attrconddef.getParams()) {
			params.regionFor.feature(PARAM__INDEX).append[noSpace]
			params.regionFor.feature(PARAM__TYPE).surround[noSpace]
		}
	}

	def dispatch void format(CorrVariablePattern corrvariablepattern, extension IFormattableDocument document) {
		corrvariablepattern.surround[newLine]
		corrvariablepattern.surround[indent]
		corrvariablepattern.interior[indent]
		corrvariablepattern.regionFor.feature(CORR_VARIABLE_PATTERN__NAME).surround[noSpace]
		corrvariablepattern.regionFor.feature(CORR_VARIABLE_PATTERN__TYPE).prepend[noSpace]

		corrvariablepattern.regionFor.keyword("-src->").prepend[newLine].append[noSpace]
		corrvariablepattern.regionFor.keyword("-trg->").prepend[newLine].append[noSpace]
		corrvariablepattern.regionFor.keyword("}").prepend[newLine]
	}

	def dispatch void format(ObjectVariablePattern objectvariablepattern, extension IFormattableDocument document) {
		objectvariablepattern.surround[newLine]
		objectvariablepattern.surround[indent]
		objectvariablepattern.interior[indent]		
//		objectvariablepattern.regionFor.keyword("{").prepend[oneSpace]
		objectvariablepattern.regionFor.feature(OBJECT_VARIABLE_PATTERN__NAME).surround[noSpace]
		objectvariablepattern.regionFor.feature(OBJECT_VARIABLE_PATTERN__TYPE).prepend[noSpace]
		
//		format(objectvariablepattern.getOp(), document);
		for (LinkVariablePattern linkVariablePatterns : objectvariablepattern.getLinkVariablePatterns()) {
			format(linkVariablePatterns, document);
		}
	}

	def dispatch void format(LinkVariablePattern linkvariablepattern, extension IFormattableDocument document) {
		linkvariablepattern.surround[newLine]
//		linkvariablepattern.surround[indent]
//		linkvariablepattern.interior[indent]
		
		linkvariablepattern.regionFor.keyword("-").surround[noSpace]
		linkvariablepattern.regionFor.keyword("->").surround[noSpace]
		
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
//		format(linkvariablepattern.getOp(), document);
	}
}
