group MocaMain;

MocaMainParser(name) ::= <<
<preamble()>
import org.moflon.moca.<name>.parser.<name; format="firstToUpper">ParserAdapter;

public class MocaMain 
{
  private static CodeAdapter codeAdapter;

  public static void main(String[] args) 
  {
    BasicConfigurator.configure();

    // Perform text-to-tree
    Folder tree = getCodeAdapter().parse(new File("instances/in/"));

    // Save tree to file
    eMoflonEMFUtil.saveModel(tree, "instances/tree.xmi");

    // Perform tree-to-model
    //TODO
    
    // Save model to file
    //TODO
   
  }
  
  public static CodeAdapter getCodeAdapter(){
    if(codeAdapter == null){
	    // Register parsers and unparsers
		codeAdapter = ProcessingFactory.eINSTANCE.createCodeAdapter();
        codeAdapter.getParser().add(new <name; format="firstToUpper">ParserAdapter());
	  }
	  
	  return codeAdapter;
  }
}
>>

preamble() ::= <<
package org.moflon.moca;
import java.io.File;
import org.apache.log4j.BasicConfigurator;
import org.moflon.core.utilities.eMoflonEMFUtil;
import org.moflon.core.moca.processing.CodeAdapter;
import org.moflon.core.moca.processing.ProcessingFactory;
import MocaTree.Folder;
import MocaTree.MocaTreePackage;
>>

MocaMainUnparser(name) ::= <<
<preamble()>
import org.moflon.moca.<name>.unparser.<name; format="firstToUpper">UnparserAdapter;

public class MocaMain 
{

  private static CodeAdapter codeAdapter;

  public static void main(String[] args) 
  {
    BasicConfigurator.configure();

    // load tree from file
    eMoflonEMFUtil.init(MocaTreePackage.eINSTANCE);
    Folder tree = (Folder) eMoflonEMFUtil.loadModel("instances/tree.xmi");
    
    // Perform tree-to-text
    getCodeAdapter().unparse("instances/out", tree);    
  }
  
   public static CodeAdapter getCodeAdapter(){
    if(codeAdapter == null){
	    // Register parsers and unparsers
		codeAdapter = ProcessingFactory.eINSTANCE.createCodeAdapter();
        codeAdapter.getUnparser().add(new <name; format="firstToUpper">UnparserAdapter());
	  }
	  
	  return codeAdapter;
  }
}
>>

MocaMainParserUnparser(name) ::= <<
<preamble()>
import org.moflon.moca.<name>.parser.<name; format="firstToUpper">ParserAdapter;
import org.moflon.moca.<name>.unparser.<name; format="firstToUpper">UnparserAdapter;

public class MocaMain 
{

  private static CodeAdapter codeAdapter;

  public static void main(String[] args) 
  {
    BasicConfigurator.configure();

    // Perform text-to-tree
    Folder tree = getCodeAdapter().parse(new File("instances/in/"));

    // Save tree to file
    eMoflonEMFUtil.saveModel(eMoflonEMFUtil.createDefaultResourceSet(), tree, "instances/tree.xmi");

    // Perform tree-to-model
    //TODO
    
    // Save model to file
    //TODO
    
    // Perform model-to-tree
    //TODO
    
    // Perform tree-to-text (using initial tree)
    getCodeAdapter().unparse("instances/out", tree);    
  }
  
  public static CodeAdapter getCodeAdapter(){
    if(codeAdapter == null){
	    // Register parsers and unparsers
		codeAdapter = ProcessingFactory.eINSTANCE.createCodeAdapter();
        codeAdapter.getParser().add(new <name; format="firstToUpper">ParserAdapter());
        codeAdapter.getUnparser().add(new <name; format="firstToUpper">UnparserAdapter());	  
     }
	  
	 return codeAdapter;
  }
}
>>