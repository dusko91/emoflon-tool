
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.antlr.stringtemplate.StringTemplate;
import org.antlr.stringtemplate.StringTemplateGroup;
import org.antlr.stringtemplate.language.AngleBracketTemplateLexer;
import org.moflon.TGGLanguageActivator;
import org.moflon.tgg.language.csp.Adornment;
import org.moflon.core.utilities.MoflonUtilitiesActivator;
import org.moflon.csp.codegenerator.BasicFormatRenderer;
import SDMLanguage.patterns.BindingOperator;
import SDMLanguage.patterns.BindingSemantics;
import SDMLanguage.patterns.ObjectVariable;
import org.moflon.tgg.language.TGGRule;
import org.moflon.tgg.language.algorithm.ApplicationTypes;
import org.moflon.tgg.language.compiler.compilerfacade.CompilerfacadePackage;
import org.moflon.tgg.language.compiler.compilerfacade.CspCodeGenerator;
import org.moflon.tgg.language.compiler.compilerfacade.CspCodeGeneratorHelper;
import org.moflon.tgg.language.csp.AttributeVariable;
import org.moflon.tgg.language.csp.CSP;
import org.moflon.tgg.language.csp.LocalVariable;
import org.moflon.tgg.language.csp.OperationalCSP;
import org.moflon.tgg.language.csp.OperationalCSPType;
import org.moflon.tgg.language.csp.TGGConstraint;
import org.moflon.tgg.language.csp.Variable;

partial class CspCodeGeneratorImpl {

@members <--

   private StringTemplateGroup stg;

   private StringBuilder result = new StringBuilder();

   private final String separator = System.getProperty("line.separator");

   private int literalCount = 0;

   private Map<Variable, String> variableToName = new HashMap<Variable, String>();

   private void emitCSP()
   {
      result.append("// Create CSP");
      result.append(separator);
      result.append("CSP csp = CspFactory.eINSTANCE.createCSP();");
      result.append(separator);
   }

   private void emitAddToMatch()
   {
      result.append("isApplicableMatch.getAttributeInfo().add(csp);");
      result.append(separator);
   }

   private void emitLiterals()
   {
      final String separator = System.getProperty("line.separator");
      result.append(separator);
      result.append("// Create literals");
      result.append(separator);
      for (Variable literal : getCspCodeGeneratorHelper().getLiterals())
      {
         String var_name = "literal" + literalCount;
         variableToName.put(literal, var_name);
         Object value = convertValue(literal.getValue());
         literalCount++;
         StringTemplate st = stg.getInstanceOf("BoundVariable");
         st.setAttribute("name", var_name);
         st.setAttribute("var_name", var_name);
         st.setAttribute("value", value);
         st.setAttribute("type", literal.getType());
         result.append(st);
         result.append(separator);
      }
   }

   private Object convertValue(final Object value)
   {
      try
      {
         Integer result = new Integer(value.toString());
         return result;
      } catch (NumberFormatException e)
      {
         return value.toString();
      }
   }

   private void emitAttributeVariables()
   {
      final String separator = System.getProperty("line.separator");
      result.append(separator);
      result.append("// Create attribute variables");
      result.append(separator);
      for (AttributeVariable attributeVariable : getCspCodeGeneratorHelper().getBoundAttributeVariables())
      {
         String var_name = getCspCodeGeneratorHelper().deriveVarName(attributeVariable);
         variableToName.put(attributeVariable, var_name);
         String name = attributeVariable.getObjectVariable() + "." + attributeVariable.getAttribute();
         StringTemplate st = stg.getInstanceOf("BoundVariable");
         st.setAttribute("name", name);
         st.setAttribute("var_name", var_name);
         st.setAttribute("value", attributeVariable.getValue());
         st.setAttribute("type", handleType(attributeVariable.getType()));
         result.append(st);
         result.append(separator);
      }

   }

   private Object handleType(final String type)
   {
      // Some Java dependent adjustments
      if ("boolean".equals(type))
         return "Boolean";

      return type;
   }

   private void emitUnboundVariables()
   {
      final String separator = System.getProperty("line.separator");
      result.append(separator);
      result.append("// Create unbound variables");
      result.append(separator);
      for (AttributeVariable attributeVariable : getCspCodeGeneratorHelper().getUnboundAttributeVariables())
      {
         String var_name = "var_" + attributeVariable.getObjectVariable() + "_" + attributeVariable.getAttribute();
         variableToName.put(attributeVariable, var_name);
         String name = attributeVariable.getObjectVariable() + "." + attributeVariable.getAttribute();
         StringTemplate st = stg.getInstanceOf("UnboundVariable");
         st.setAttribute("name", name);
         st.setAttribute("var_name", var_name);
         st.setAttribute("type", handleType(attributeVariable.getType()));
         result.append(st);
         result.append(separator);
      }
      for (LocalVariable localVariable : getCspCodeGeneratorHelper().getLocalVariables())
      {
         String name = localVariable.getName();
         String var_name = "var_" + name;
         variableToName.put(localVariable, var_name);
         StringTemplate st = stg.getInstanceOf("UnboundVariable");
         st.setAttribute("name", name);
         st.setAttribute("var_name", var_name);
         st.setAttribute("type", localVariable.getType());
         result.append(st);
         result.append(separator);
      }
   }

   private void emitAddConstraints(final OperationalCSP csp)
   {
      result.append(separator);
      List<String> constraints = new ArrayList<String>();
      for (TGGConstraint constraint : csp.getConstraints())
      {
         constraints.add(constraintNames.get(constraint));
      }
      StringTemplate st = stg.getInstanceOf("AddConstraints");
      st.setAttribute("constraints", constraints);
      result.append(st.toString());
      result.append(separator);

   }

   private void emitConstraints(final OperationalCSP csp)
   {
      result.append(separator);
      result.append("// Create constraints");
      result.append(separator);
      for (TGGConstraint constraint : csp.getConstraints())
      {
         if (constraint.getName().equals("eq"))
         {
            deriveVariableNameForConstraint(constraint);
            StringTemplate st = stg.getInstanceOf("Eq");
            st.setAttribute("type", handleType(constraint.getVariables().get(0).getType()));
            st.setAttribute("instanceName", constraintNames.get(constraint));
            result.append(st.toString());
         } else
         {
            deriveVariableNameForConstraint(constraint);
            StringTemplate st = stg.getInstanceOf("Constraint");
            st.registerRenderer(String.class, new BasicFormatRenderer());
            st.setAttribute("constraint", constraint.getName());
            st.setAttribute("instanceName", constraintNames.get(constraint));
            result.append(st.toString());
         }
      }
      result.append(separator);
   }

   private void emitSolveCSP(final OperationalCSP csp)
   {
      result.append(separator);
      result.append("// Solve CSP");
      result.append(separator);
      List<String> variables = new ArrayList<String>();
      for (TGGConstraint constraint : csp.getConstraints())
      {
         for (Variable variable : constraint.getVariables())
         {
            variables.add(variableToName.get(variable));
         }

         StringTemplate st = stg.getInstanceOf("Solve");
         st.setAttribute("constraint", constraintNames.get(constraint));
         st.setAttribute("variables", variables);
         st.setAttribute("ruleName", constraint.getRuleName());
         result.append(st.toString());
         result.append(separator);
         variables.clear();

         // Manipulate solve of negated constraint
         if (constraint.isNegated())
         {
            st = stg.getInstanceOf("NegateConstraint");
            st.setAttribute("constraint", constraintNames.get(constraint));
            result.append(st.toString());
            result.append(separator);
         }
      }
   }

   /*
   * Since constraints can be used more than once, ensure that the created instances have distinct names (avoid
   * duplicate local variable).
   */
   private Map<String, Integer> constraintInstances = new HashMap<String, Integer>();

   private Map<TGGConstraint, String> constraintNames = new HashMap<TGGConstraint, String>();

   private void deriveVariableNameForConstraint(final TGGConstraint constraint)
   {
      String result = "";
      if (!constraintInstances.containsKey(constraint.getName()))
      {
         constraintInstances.put(constraint.getName(), new Integer(0));
         result = constraint.getName();
      } else
      {
         Integer count = constraintInstances.get(constraint.getName());
         result = constraint.getName() + "_" + count;
         constraintInstances.put(constraint.getName(), count + 1);
      }
      constraintNames.put(constraint, result);
   }

   private void loadTemplateGroup()
   {
      try
      {
         URL templateURL = MoflonUtilitiesActivator.getPathRelToPlugIn("/templates/Csp.stg", TGGLanguageActivator.getDefault().getPluginId());
         BufferedReader reader = new BufferedReader(new InputStreamReader(templateURL.openStream()));
         stg = new StringTemplateGroup(reader, AngleBracketTemplateLexer.class);
      } catch (IOException e)
      {
         throw new RuntimeException("Template group for CSP Codegenerator could not be loaded!");
      }

   }

   private void emitMatchSnapshot()
   {
      result.append(separator);
      result.append("// Snapshot pattern match on which CSP is solved");
      result.append(separator);

      for (ObjectVariable ov : getCspCodeGeneratorHelper().getTggRule().getObjectVariable())
      {
         if (ov.getBindingOperator() == BindingOperator.CHECK_ONLY && ov.getBindingSemantics() != BindingSemantics.NEGATIVE)
         {
            result.append("isApplicableMatch.registerObject(\"" + ov.getName() + "\"," + ov.getName() + ");");
            result.append(separator);
         }
      }

   }
   
-->

@model getSolveCSPCode () <--

      return result.toString();
-->

@model performCodeGen (ApplicationTypes direction, OperationalCSPType operationalRule) <--

      OperationalCSP csp = getCspCodeGeneratorHelper().getOperationalCSP(direction, operationalRule);
      result = new StringBuilder();
      // always create csp object because the method must not return null
      emitCSP();

      if (operationalRule == OperationalCSPType.IS_APPLICABLE)
         emitAddToMatch();

      if (csp != null)
      {
         loadTemplateGroup();

         emitLiterals();
         emitAttributeVariables();
         emitUnboundVariables();
         emitConstraints(csp);
         emitAddConstraints(csp);
         emitSolveCSP(csp);
      }

      if (operationalRule == OperationalCSPType.IS_APPLICABLE)
         emitMatchSnapshot();

      // return the possibly empty csp object
      result.append("return csp;");
-->

@model getCheckCode (ApplicationTypes direction, OperationalCSPType operationalRule) <--

      // return empty string, if there is no CSP in this rule.
      if (getCspCodeGeneratorHelper().getOperationalCSP(direction, operationalRule) == null)
      {
         return "return true;";
      } else
      {
         return "return csp.check();";
      }
-->

@model computeUsedAdornments (ApplicationTypes direction, CSP csp) <--

      if (direction == ApplicationTypes.SIMULTANEOUS)
      {
         for (TGGConstraint constraint : csp.getConstraints())
         {
            for (int i = 0; i < constraint.getModelgenAdornments().size(); i++)
            {
               Adornment modelgenAdornment = constraint.getModelgenAdornments().get(i);
               boolean alreadyIn = false;
               for (Adornment defaultA : constraint.getAllowedAdornments())
               {
                  if (defaultA.getValue().equalsIgnoreCase(modelgenAdornment.getValue()))
                  {
                     alreadyIn = true;
                  }
               }
               if (!alreadyIn)
               {
                  constraint.getAllowedAdornments().add(modelgenAdornment);
                  i = -1;
               }

            }
         }
      }
-->

}